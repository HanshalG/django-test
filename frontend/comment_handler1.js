// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Promise = require("@rescript/core/src/Core__Promise.res.js");
var Webapi__Dom__Document = require("rescript-webapi/src/Webapi/Dom/Webapi__Dom__Document.res.js");

function getCookie(name) {
  var doc = Webapi__Dom__Document.asHtmlDocument(document);
  if (doc === undefined) {
    return ;
  }
  var cookieStr = Caml_option.valFromOption(doc).cookie;
  var matchingCookies = Belt_Array.keep(cookieStr.split(";"), (function (c) {
          return c.trim().startsWith(name + "=");
        }));
  var cookie = Belt_Array.get(matchingCookies, 0);
  if (cookie === undefined) {
    return ;
  }
  var trimmedCookie = cookie.trim();
  var len = name.length;
  return decodeURIComponent(trimmedCookie.substring(len + 1 | 0, trimmedCookie.length));
}

function fetchComments(postId, commentList) {
  return Core__Promise.$$catch(fetch("/post/" + postId + "/comments/").then(function (prim) {
                    return prim.json();
                  }).then(function (data) {
                  commentList.innerHTML = "";
                  var comments = Js_json.decodeArray(data);
                  if (comments !== undefined) {
                    Belt_Array.forEach(comments, (function (comment) {
                            var li = document.createElement("li");
                            var commentDict = Js_json.decodeObject(comment);
                            var authorName;
                            if (commentDict !== undefined) {
                              var username = Js_dict.get(commentDict, "author_username");
                              if (username !== undefined) {
                                var name = Js_json.decodeString(username);
                                authorName = name !== undefined ? name : "Anonymous";
                              } else {
                                authorName = "Anonymous";
                              }
                            } else {
                              authorName = "Anonymous";
                            }
                            var commentDict$1 = Js_json.decodeObject(comment);
                            var body;
                            if (commentDict$1 !== undefined) {
                              var body$1 = Js_dict.get(commentDict$1, "body");
                              if (body$1 !== undefined) {
                                var body$2 = Js_json.decodeString(body$1);
                                body = body$2 !== undefined ? body$2 : "";
                              } else {
                                body = "";
                              }
                            } else {
                              body = "";
                            }
                            li.textContent = authorName + ": " + body;
                            commentList.appendChild(li);
                          }));
                    return Promise.resolve();
                  } else {
                    commentList.innerHTML = "<li>Error loading comments. Please refresh the page.</li>";
                    return Promise.resolve();
                  }
                }), (function (error) {
                commentList.innerHTML = "<li>Error loading comments. Please refresh the page.</li>";
                return Promise.resolve();
              }));
}

export async function submitComment(postId, content, commentList) {
    try {
        const response = await fetch('/post/' + postId + '/comments/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify({ body: content })
        });

        if (!response.ok) {
            throw new Error('Failed to post comment');
        }

        // Refresh comments after successful submission
        await fetchComments(postId, commentList);
        return true;
    } catch (error) {
        console.error('Error submitting comment:', error);
        alert('Failed to post comment. Please try again.');
        return false;
    }
}
;

exports.getCookie = getCookie;
exports.fetchComments = fetchComments;
/*  Not a pure module */
