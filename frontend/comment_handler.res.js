// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Promise from "@rescript/core/src/Core__Promise.res.js";
import * as Webapi__Fetch from "rescript-webapi/src/Webapi/Webapi__Fetch.res.js";
import * as Webapi__Dom__Document from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Document.res.js";

function getCookie(name) {
  var doc = Webapi__Dom__Document.asHtmlDocument(document);
  if (doc === undefined) {
    return ;
  }
  var cookieStr = Caml_option.valFromOption(doc).cookie;
  var matchingCookies = Belt_Array.keep(cookieStr.split(";"), (function (c) {
          return c.trim().startsWith(name + "=");
        }));
  var cookie = Belt_Array.get(matchingCookies, 0);
  if (cookie === undefined) {
    return ;
  }
  var trimmedCookie = cookie.trim();
  var len = name.length;
  return decodeURIComponent(trimmedCookie.substring(len + 1 | 0, trimmedCookie.length));
}

function fetchComments(postId, commentList) {
  var fetchComments$1 = fetch("/post/" + postId + "/comments/").then(function (prim) {
            return prim.json();
          }).then(function (json) {
          commentList.innerHTML = "";
          return Promise.resolve(Js_json.decodeArray(json));
        }).then(function (opt) {
        return Promise.resolve(Belt_Option.getExn(opt));
      });
  return fetchComments$1.then(function (array) {
              return Promise.resolve(Belt_Array.forEach(array, (function (comment) {
                                var li = document.createElement("li");
                                var commentDict = Belt_Option.getExn(Js_json.decodeObject(comment));
                                var body = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(commentDict, "body"))));
                                var authorName = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(commentDict, "author_username"))));
                                li.textContent = authorName + ": " + body;
                                commentList.appendChild(li);
                              })));
            });
}

function submitComment(postId, content, commentList) {
  var headers = {};
  headers["Content-Type"] = "application/json";
  var token = getCookie("csrftoken");
  if (token !== undefined) {
    headers["X-CSRFToken"] = token;
  }
  var body = {};
  body["body"] = content;
  return Core__Promise.$$catch(fetch("/post/" + postId + "/comments/", Webapi__Fetch.RequestInit.make("Post", Caml_option.some(headers), Caml_option.some(JSON.stringify(body)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)).then(function (response) {
                  if (response.ok) {
                    return fetchComments(postId, commentList).then(function () {
                                return Promise.resolve(true);
                              });
                  } else {
                    return Promise.reject(Js_exn.raiseError("Failed to post comment"));
                  }
                }), (function (err) {
                console.error("Error submitting comment:", err);
                alert("Failed to post comment. Please try again.");
                return Promise.resolve(false);
              }));
}

export {
  getCookie ,
  fetchComments ,
  submitComment ,
}
/* Webapi__Dom__Document Not a pure module */
